Блочные боксы
Каждому HTML-элементу на странице соответствует прямоугольная область. Такие области называются боксами. Самые распространённые типы боксов — блочные и строчные.
Блочный бокс — это крупная неразрывная прямоугольная область на странице.
Блочные боксы имеют следующие особенности:
1. До и после блочного бокса существует перенос строки.
2. Для блочных боксов можно задавать ширину, высоту, внутренние и внешние отступы.
3. Занимают всё доступное пространство по горизонтали.

Блочными боксами по умолчанию обладают такие теги как: <p>, <h1>, <h2>, <ul> и так далее.
Ещё один важный тег с блочным боксом — это тег <div>, который обозначает просто «блок» или «прямоугольный контейнер». Этот тег чаще всего используется для создания сеток.


Строчные боксы
Строчные боксы — противоположность блочных. Строчные боксы располагаются друг за другом в одной строке, могут разрываться и находиться на нескольких строках:
Особенности строчных боксов:
1. До и после строчного бокса отсутствуют переносы строки.
2. Ширина и высота строчного бокса зависит только от его содержания, задать размеры с помощью CSS нельзя.
3. Можно задавать только горизонтальные отступы.

Теги со строчным боксом по умолчанию: <a>, <strong>, <em>, <span> и так далее.
Эти теги предназначены для оформления текста на уровне небольших фраз и отдельных слов.
А теги с блочным боксом, напротив, предназначены для разметки крупных блоков текста (заголовки, абзацы, списки) и создания сетки.


Ширина и высота
Ширина и высота боксов задаются с помощью свойств width и height соответственно.
По умолчанию блочные боксы занимают всю доступную ширину, которая равна ширине родительского контейнера или окна браузера.
Высота по умолчанию блочных боксов зависит от их содержимого. Если задать блочному боксу ширину и высоту так, что содержимое не будет в него помещаться, то оно как бы «выпадет» из него.
Строчные боксы не реагируют на задание ширины и высоты в CSS.
Задать ширину элементу можно, например, так:

.selector {
  width: 100px;
  height: 100px;
}

Вернуть значения по умолчанию можно с помощью специального значения auto:

.selector {
  width: auto;
  height: auto;
}


Внутренние отступы, свойство padding
Свойство padding задаёт внутренние отступы блока — отступы от внешней границы блока до его содержимого. Эти отступы ещё иногда называют «полями».
Внутренние отступы для разных сторон задаются с помощью свойств padding-top, padding-right, padding-bottom и padding-left.
Существует также сокращённое свойство padding, в котором можно задать внутренние отступы сразу для всех сторон:

1. padding: 10px;
2. padding: 5px 10px;
3. padding: 5px 10px 15px;
4. padding: 5px 10px 15px 20px;

1. Одинаковые отступы со всех сторон.

2. Отступы сверху и снизу 5px, справа и слева 10px.

3. Отступ сверху 5px, слева и справа 10px, снизу 15px.

4. Разные отступы со всех сторон, в порядке верхний, правый, нижний, левый.

Для строчных боксов лучше не задавать вертикальных отступов, так как они ведут себя непредсказуемо.


Внешние отступы, свойство margin

Свойство margin задаёт внешние отступы блока — отступы от внешней границы элемента до границ родительского элемента или до соседних элементов.

Внешние отступы для разных сторон задаются с помощью свойств margin-top, margin-right, margin-bottom и margin-left:


Внешние отступы
Сокращённое свойство margin работает аналогично свойству padding, только задаёт внешние отступы, а не внутренние:

1. margin: 10px;
2. margin: 5px 10px;
3. margin: 5px 10px 15px;
4. margin: 5px 10px 15px 20px;

1. Одинаковые отступы со всех сторон.

2. Сверху и снизу 5px, справа и слева 10px.

3. Сверху 5px, слева и справа 10px, снизу 15px.

4.Верхний, правый, нижний, левый отступы соответственно.

Строчные боксы реагируют только на горизонтальные внешние отступы.


Рамки
Рамка задаётся с помощью свойства border, которое состоит из трёх компонентов:

1. ширина рамки;
2. стиль рамки;
3. цвет.

Например:

selector {
  border: 5px solid red;
}

Это правило задаёт красную сплошную рамку толщиной 5px.
Задавать рамку можно одним свойством border, а можно и с помощью отдельных свойств border-width, border-style, border-color. Например:

selector {
  border-width: 5px;
  border-style: solid;
  border-color: red;
}

Это правило задаёт такую же рамку, как и в примере выше.
Несколько самых распространённых стилей рамок:

- solid — сплошная;
- dashed — пунктирная;
- dotted — точками.

Рамку можно задавать элементам и со строчным, и с блочным боксом.


Стандартная блочная модель
Стандартная блочная модель отвечает на основной вопрос: "Сколько же в итоге места будет занимать бокс?"
Ответ следующий: "Область, занимаемая блочным боксом, складывается из его ширины и высоты содержания, внутренних и внешних отступов, ширины рамок."
Для строчных боксов есть свои особенности, которые мы опишем позже.
Стандартная блочная модель:

- ширина/высота содержания — свойства width и height;
- внутренние отступы — свойство padding;
- рамки — свойство border;
- внешние отступы — свойство margin.


«Схлопывание» внешних отступов
Во второй части главы разберём некоторые важные тонкости блочной модели. И начнём с внешних отступов (margin).
Вертикальный отступ между двумя соседними элементами равен максимальному отступу между ними. Если отступ одного элемента равен 50px, а второго 30px, то отступ между ними будет 50px.
Этот эффект называется эффектом «схлопывания» внешних отступов.
Горизонтальные отступы между элементами просто складываются. Например, горизонтальный отступ между двумя элементами с отступами 30px будет равен 60px.


«Выпадание» внешних отступов
«Выпадание» — это ещё один эффект, связанный с вертикальными внешними отступами.
Если внутри родительского блока расположить блок и задать ему отступ сверху, то внутренний блок прижмётся к верхнему краю родительского, а у родительского элемента появится отступ сверху. То есть верхний отступ внутреннего элемента «выпадает» из родительского элемента.
Если у родительского элемента тоже был задан внешний отступ, то выберется максимальный отступ между собственным и «выпавшим».
Чтобы избавиться от эффекта выпадания, можно задать родительскому элементу внутренний отступ (паддинг) сверху или добавить рамку сверху.
Внешние и внутренние отступы всегда складываются.


Как отцентровать элемент?
Чтобы отцентровать блочный элемент, нужно выполнить следующие действия:
Задать элементу ширину, которая меньше ширины родительского контейнера.
Задать для внешних отступов справа и слева значение auto.
Примеры кода:

selector {
  width: 100px;
  margin: 0 auto;
}

selector {
  width: 100px;
  margin-left: auto;
  margin-right: auto;
}


Блочная модель и строчные боксы
Ещё раз акцентируем внимание на особенности поведения элементов со строчным боксом в блочной модели:

1. Не реагируют на CSS-свойства width и height.
2. Частично реагируют на margin, воспринимая только горизонтальные отступы.
3. Частично реагируют на padding, воспринимая только горизонтальные отступы.
4. При задании вертикальных padding визуально увеличиваются, но без увеличения занимаемого места (не отталкивают другие элементы).
5. Воспринимают рамки. Аналогично padding рамки сверху и снизу не увеличивают занимаемое элементом место.
После выполнения задания обратите внимание на то, что расстояние между строк в абзацах не увеличилось, хотя элементы визуально стали выше.


Ширина 100% и ширина по умолчанию
CSS-свойство width задаёт не общую ширину блока, а только ширину содержания. Общая ширина блока затем складывается из трёх компонентов: ширины содержания, внутренних отступов и ширины рамок слева и справа.
Поведение элемента может зависеть от того, как именно вы зададите его ширину.
Первый вариант. Вариант по умолчанию, когда ширина не задаётся, соответствует значению width: auto;. В этом случае блок занимает всю ширину родительского блока. Если у блока есть внутренние отступы или рамки, то его ширина содержания автоматически уменьшается, а общая ширина остаётся равной ширине родителя.
Второй вариант. Когда ширина блока задана явно, например, width: 100%;. В этом случае ширина содержания блока равна ширине родительского блока. Если блоку добавить внутренние отступы и рамки, то его общая ширина становится больше ширины родителя.
Помимо CSS ширина полей ввода может быть задана в значении атрибута size. Ширина width: auto для полей ввода рассчитывается из значения size по умолчанию и не растягивает поля на всю ширину контейнера.


Особенности применения width: 100%
Представьте, что у нас есть форма, в которой поля должны занимать всю ширину контейнера, но при этом иметь фиксированные внутренние отступы, чтобы текст не прилипал к краям. Форма может быть разной ширины. Для полей такой формы можно задать такие стили:

input[type="text"] {
  width: 100%;
  padding: 0 10px;
}

Ширина 100% заставит поля быть такой же ширины, как родительский блок, а паддинг добавит отступы. Но, как вы уже догадались, за счёт отступов поле станет шире своего контейнера. И эта особенность создаёт проблему.


Изменяем блочную модель, свойство box-sizing
Проблему с шириной тянущихся полей решить сложно. Идеальным вариантом было бы изменение алгоритма расчёта ширины элемента, чтобы свойство width задавало не ширину содержания, а общую ширину.
К счастью, такая возможность в CSS есть. Реализуется она с помощью свойства box-sizing.
Это свойство имеет два значения:
content-box — значение по умолчанию, соответствует стандартной блочной модели.
border-box — изменяет режим расчёта ширины элемента на описанный выше: теперь ширина элемента включает и рамку, и внутренние отступы и, собственно, ширину содержания самого элемента.


Управление типом бокса, свойство display
Тип бокса элемента не является чем-то вечным и неизменным, его можно изменять с помощью CSS. За это отвечает свойство display.
С его помощью, например, можно сделать боксы абзацев и заголовков строчными, а боксы спанов и стронгов — блочными элементами.
У свойства display много значений. С двумя из них вы уже заочно познакомились. Свойство display: block обозначает блочный бокс элемента, а display: inline — строчный.


Свойство display: inline-block
Иногда возникает необходимость расположить в ряд несколько элементов с заданными размерами. Элементы со строчным боксом для этого не подходят, так как не воспринимают размеры. Элементы с блочным боксом тоже не подходят, так как до и после них существует перенос строки. Конечно, блочные боксы можно приспособить для такой задачи, используя дополнительные свойства (которые будут разбираться далее в главе про сетки).
Но более простой способ — использовать элементы с блочно-строчным боксом. В HTML нет элементов с блочно-строчным боксом по умолчанию, но любой элемент можно переключить такой режим отображения, задав ему свойство display со значением inline-block.
Особенности элементов с блочно-строчным боксом:
- им можно задавать размеры, рамки и отступы, как и элементам с блочным боксом;
- их ширина по умолчанию зависит от содержания, а не растягивается на всю ширину контейнера;
- они не порождают принудительных переносов строк, поэтому могут располагаться на одной строке, пока помещаются в родительский контейнер;
- элементы в одной строке выравниваются вертикально подобно элементам со строчным боксом.


Свойство display: table
Дальнейшие несколько заданий будут посвящены табличным типам бокса.
Табличные сетки были очень популярны на заре веба. Действительно, у табличных сеток есть преимущества, которые сложно получить с помощью блоков. Например, столбцы одинаковой высоты.
Однако, семантически таблицы не предназначены для разметки сеток и постепенно от них отказались. Но память об их удобстве жила.
Позднее было разработано семейство значений свойства display, которое позволяет задать табличное поведение любым элементам.
Первое значение — display: table задаёт боксу элемента тип таблица. Особенности элементов с табличным боксом:
1. можно задавать ширину, высоту, рамки, отступы;
2. по умолчанию ширина зависит от содержания;
3. переносы строки до и после элемента.
Табличный тип бокса похож на блочный за исключением ширины по умолчанию.


display: table-row
Как вы догадались, мы строим таблицу на дивах с помощью новых значений свойства display. Знания про таблицы вы можете освежить в главе Знакомство с таблицами.
Любая таблица содержит элементы с типом бокса строка таблицы, внутри которых должны содержаться элементы с типом бокса ячейка таблицы. Соответствие тегов таблицы значениям display:

<table> — display: table;

<tr> — display: table-row;

<td> — display: table-cell;

В этом задании вы создадите «строки таблицы» с помощью display: table-row;. Строка таблицы — необычный элемент. Она является контейнером для ячеек и практически не имеет собственного отображения. Для неё можно только задавать цвет фона.


Свойство display: table-cell
С помощью значения table-cell свойства display можно задать боксу элемента тип ячейка таблицы. Конечно, лучше чтобы элементы-ячейки находились внутри элементов-строк, которые находятся внутри элементов-таблиц.
Вы можете просто задать боксу элемента тип ячейка таблицы, не добавляя вокруг него дополнительных элементов-строк и таблиц. В этом случае браузер создаст дополнительные анонимные элементы строки и таблицы. Неудобство заключается в том, что вы не сможете ими управлять.
К таблицам, созданным с помощью CSS, можно применять те же свойства, что и к обычным таблицам. Например, задавать отступы между ячейками или режим схлопывания границ.
Существует ещё два интересных типа боксов: флексовые и гридовые. Флексбоксы сейчас уже используются повсеместно. Гриды тоже постепенно получают всё более широкую поддержку.


Свойство display: none
Значение none свойства display используется очень часто. С его помощью можно скрыть элемент, как будто его и не было. Скрытый элемент не отображается и не занимает места на странице.
Это свойство применяется при создании выпадающих меню, динамических галерей, переключающихся вкладок и много где еще.
Есть ещё одно CSS-свойство, которое используется для сокрытия элементов. Это свойство visibility со значением hidden. Оно «прячет» элемент — он становится невидимым, но занимает место на странице.


