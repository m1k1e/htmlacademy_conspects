Координаты грид-элементов: grid-row-start и grid-column-start
Гриды — новая система для построения сетки страниц. Несмотря на новизну, в современных браузерах у гридов хорошая поддержка. Зачем нам гриды, если есть, например, флексбоксы? Дело в том, что в отличие от флексбоксов, гриды позволяют нам работать и с колонками, и со строками одновременно, что замечательно, не правда ли? Но не будем забегать вперёд и расскажем обо всём по порядку.
В первой части главы мы займёмся изучением гридов на примере ландшафтного дизайна, попробуем построить грид-раскладку, представив, что это карта местности, и составим визуальный план того, как будут располагаться объекты на этой местности.
После того, как вы станете матёрыми ландшафтными дизайнерами, мы перейдём ко второй части главы, где с помощью гридов попробуем создать простые сетки реальных страниц, похожих на те, что встречаются в сети. Наверняка вы уже делали что-то подобное с помощью флоатов, CSS-таблиц или флексов.
Итак, чтобы сделать блок грид-контейнером, нужно задать ему соответствующее значение свойства display:

.container {
  display: grid;
}

Непосредственные дочерние элементы в грид-контейнере становятся его грид-элементами и далее уже располагаются согласно раскладке грида.
Как мы уже упоминали, в гриде элементы располагаются по двумерной сетке. То есть грид состоит из рядов и столбцов, располагающихся между линий, которые нумеруются по порядку.
А чтобы расположить элемент внутри грида, нужно задать ему координаты. То есть как бы заставить элемент говорить:

    Я — элемент грида, начинаюсь с такой-то линии столбцов и с такой-то линии рядов.

Когда мы задаём координату начала грид-элементу по рядам или столбцам, он автоматически продлевается до следующей линии рядов или столбцов и таким образом образуется грид-ячейка.
На примере выше ячейка начинается на 4 линии столбцов и 3 линии рядов.
В коде делается это с помощью свойств grid-column-start и grid-row-start.
Пример:

grid-column-start: 4 — элемент начинается с 4 линии столбцов.
grid-row-start: 3 — элемент начинается с 3 линии рядов.


Координаты грид-элементов: grid-column-start и grid-column-end
Итак, теперь мы знаем, что будет, если указать начало грид-ячейки по ряду и по столбцу — её размер автоматически станет равен одному «делению» грида.
Если же мы захотим продлить грид-ячейку на несколько рядов или столбцов, то нужно указать помимо той линии, где ячейка начинается, ещё ту линию, где она заканчивается.
На примере выше ячейка начинается на 3 линии столбцов, а заканчивается на 5 линии.
Для обозначения конца ячейки по столбцам существует свойство grid-column-end.
То есть в коде мы так и запишем:

grid-column-start: 3 — элемент начинается с 3 линии столбцов.
grid-column-end: 5 — элемент заканчивается на 5 линии столбцов.


Координаты грид-элементов: grid-row-start и grid-row-end
А что если мы захотим растянуть ячейку и по рядам тоже?
Для того чтобы мы имели такую возможность, существует свойство grid-row-end, которое работает в паре с grid-row-start и задаёт ячейке нужные нам координаты.
На примере выше ячейка начинается на 2 линии рядов, а заканчивается на 4 линии.
Код получится такой:

grid-row-start: 2 — элемент начинается со 2 линии рядов.
grid-row-end: 4 — элемент заканчивается на 4 линии рядов.


Отрицательные значения grid-column-start и grid-column-end
Интересной особенностью грид-ячейки является возможность начинать отсчёт её координат как от начала (первой линии ряда или столбца), так и от конца грида (последней линии ряда или столбца).
То есть, чтобы сказать ячейке: «Начинайся на первой линии столбцов от начала и заканчивайся на первой линии столбцов с конца», нужно написать такой код:

.element {
  grid-column-start: 1;
  grid-column-end: -1;
}

А для того чтобы сказать ячейке: «Начинайся на первой линии столбцов с конца грида и заканчивайся на первой линии с начала», нужно написать:

.element {
  grid-column-start: -1;
  grid-column-end: 1;
}


Отрицательные значения grid-row-start и grid-row-end
В предыдущем задании мы уже упоминали, что отрицательные значения в координатах можно использовать и по рядам. И, как вы уже догадались, для этого нам понадобятся свойства grid-row-start/grid-row-end.
Мы уже брали значение -1, давайте попробуем что-то новенькое, например, значение -2, что будет означать вторая линия рядов с конца грида.
В коде это будет записано так:

.element {
  grid-row-start: 1;
  grid-row-end: -2;
}


Наложение элементов грида и свойство z-index
Напоминает абсолютное позиционирование, не правда ли?
Как и на абсолютно спозиционированные элементы, на пересекающиеся грид-элементы действует старое-доброе свойство z-index.
Чем выше z-index, тем выше элемент в «стопке». Если у двух элементов одинаковый z-index, то выше будет располагаться тот, который идёт следующим по разметке.


Именованные области грида: свойство grid-template-areas
Чтобы быстро описать простую сетку с помощью гридов, нужно хорошенько поорудовать свойствами grid-row-start/grid-row-end и grid-column-start/grid-column-end. Что мы и делали в предыдущих заданиях. Но получается несколько многословно, не правда ли?
Есть более быстрый способ создания сетки и заключается он в использовании свойств grid-template-areas и grid-area.
Помните игру «крестики-нолики», где мы вписываем в сетку 3 на 3 значки?
Так вот, со свойством grid-template-areas мы будем работать похожим образом, буквально по клеточкам визуально размечая наш будущий грид.
Приведём пример. Допустим, что мы хотим сверстать простой грид 3 на 3, который представляет из себя три столбца.
В разметке мы имеем контейнер с тремя дочерними элементами:

<div class="grid">
  <div class="grid-element-1"></div>
  <div class="grid-element-2"></div>
  <div class="grid-element-3"></div>
</div>

В CSS нам нужно описать области грида:

grid-template-areas:
  "red yellow green"
  "red yellow green"
  "red yellow green";

Строки в значении свойства grid-template-areas — не что иное, как визуальное представление рядов грида, а значения в строках — представление столбцов.
Так теперь таким образом можно строить какие угодно по форме сетки? Увы, но нет, есть небольшое ограничение — грид должен быть прямоугольной формы, а количество объявленных столбцов в каждой строке должно быть одинаковым.
Названия областей должны начинаться с буквы и могут включать цифры и дефис. Например, "lava lava2 lava-3" — валидное значение для grid-template-areas. Названия в строках перечисляются через один или несколько пробелов.
Разметив то, как должны располагаться ячейки в гриде с помощью grid-template-areas, мы сделали половину дела. Теперь нужно связать визуальное представление с конкретными элементами в HTML. И поможет нам в этом свойство grid-area.
Так и запишем:

    grid-element-1, ты будешь соответствать области red, grid-element-2, ты будешь yellow, а ты, grid-element-3 — green.

.grid-element-1 {
  grid-area: red;
}

.grid-element-2 {
  grid-area: yellow;
}

.grid-element-3 {
  grid-area: green;
}

Обратим внимание, что название grid-area для каждого элемента должно быть уникальным. Например, если есть 6 грид-элементов, значит должно быть и 6 названий grid-area:

grid-template-areas:
  "green   green red    yellow"
  "yellow2 red2  green2 yellow"
  "yellow2 red2  green2 yellow";

А дальше для каждого элемента c первого по шестой прописывается своё название grid-area.
Одному элементу в HTML может соответствовать только одна грид-область. Если одна грид-область задана нескольким HTML-элементам, действовать будет только одно, наиболее специфичное объявление:

.grid-element-1 {
  grid-area: red; /* Грид-область назначается первому элементу */
}

.grid-element-2 {
  grid-area: red; /* Грид-область red переназначается второму элементу */
}



Свойство grid-template-areas и пустые области грида
Свойство grid-template-areas позволяет некоторые области помечать как пустые.
Для этого вместо буквенного именования области используется символ точки.
К примеру, возьмём код из прошлого раздела, где был грид из трёх столбцов.

grid-template-areas:
  "red yellow green"
  "red yellow green"
  "red yellow green";

Если мы хотим, чтобы в первом ряду осталась только последняя зелёная ячейка, то заменим red и yellow в первой строке на точки:

grid-template-areas:
  ".   .      green"
  "red yellow green"
  "red yellow green";


Автоматические координаты элементов в гриде: столбцы
Свойство grid-template-columns перечисляет количество и ширину будущих столбцов грида. К примеру, запись grid-template-columns: 100px 100px 100px; говорит гриду:

Ты будешь иметь три столбца, каждый шириной 100px.

А что же в это время происходит с рядами?
Если не задавать параметры для рядов, то их количество становится переменным. Порядок действий такой:

   1. Все грид-элементы выстраиваются в один ряд согласно объявленной раскладке столбцов.
   2. Если грид-элементов больше, чем столбцов, то не вписавшиеся в один ряд элементы переносятся на следующий ряд и заполняют его.
   3. Новые ряды формируются до тех пор, пока все грид-элементы не будут вписаны в раскладку по столбцам. Если последний ряд заполняется элементами не полностью, то оставшееся место в гриде остаётся пустым.

Рассмотрим пример. Возьмём грид с пятью элементами, которому задан один столбец. По раскладке получается, что в первый ряд грида может поместиться всего один грид-элемент. Остальные элементы будут переноситься на новые ряды, и таким образом сформируют пять рядов, то есть выстроятся в столбец.
Если же мы увеличим количество столбцов до двух, то в один ряд будут помещаться уже по два элемента. То есть всего элементы сформируют три ряда, в первом и втором ряду будет по два элемента, а в третьем — один.
Что касается высоты рядов, то она распределится равномерно, чтобы ряды заполнили собой всё пространство грида.


Автоматические координаты элементов в гриде: столбцы и ряды
Аналогично grid-template-columns работает и свойство grid-template-rows, только оно сообщает гриду сколько рядов он будет содержать и какой они будут высоты. К примеру, запись grid-template-rows: 100px 200px 100px; говорит гриду:

    Ты будешь иметь три ряда, первый высотой 100px, второй высотой 200px и третий — 100px.

Если при этом столбцам не заданы явные параметры, то по умолчанию, будет существовать всего один столбец, элементы в котором растянутся на всю его ширину.
В случае, если в гриде есть ряды, которым не задана явная высота в grid-template-rows, оставшееся свободное пространство по высоте распределится среди них равномерно.
Таким образом, зная об особенностях распределения ячеек в гридах и используя свойства grid-template-columns и grid-template-rows, можно создавать нужные вам сетки.


Комбинируем автоматические и явные координаты
Итак, мы выяснили, как свойства grid-template-columns и grid-template-rows влияют на количество и размеры столбцов и рядов грида, а свойства grid-column-start/grid-column-end и grid-row-start/grid-row-end помогают нам распределять грид-элементы по конкретным координатам в грид-раскладке.
Теперь самое время разобраться, как использовать эти свойства совместно.
Давайте создадим грид с нуля и определим для него столбцы и ряды, а затем будем управлять отдельными элементами.
Начнём с создания грид-контейнера. При его создании грид по умолчанию будет иметь всего один столбец во всю ширину контейнера, а каждый его элемент будет занимать целый ряд.


Комбинируем автоматические и явные координаты, часть 2
Как вы заметили, у нас появились пустые незаполненные элементами области, которые мы можем использовать. Поэтому следующим нашим шагом после определения рядов и столбцов будет распределение элементов. Зачем пропадать драгоценному пространству?
Идея в том, чтобы правильно распределить это пространство среди уже имеющихся элементов.
Как это сделать? Задавать всем элементам начало и конец? Не обязательно. Часть из элементов может иметь чёткие координаты в гриде, а часть — занимать оставшееся место, то есть распределяться браузером автоматически.
Работает это следующим образом:

  1.  Сначала выстраиваются элементы с явными координатами.
  2.  Затем выстраиваются элементы, которым координаты явно не заданы. Они выстраиваются по очереди в порядке следования в разметке в оставшиеся «свободные ячейки» от начала грида к концу. По размерам такие грид-элементы занимают одну ячейку.


Нефиксированная ширина столбцов
Мы убедились, что если не задавать строкам и столбцам грида явные размеры, то они по умолчанию будут занимать всё свободное пространство. Давайте разберёмся, как мы можем извлечь из этого пользу.
Когда нам нужно задать явную ширину первому и последнему столбцу трёхколоночного грида, а среднему столбцу отдать всё оставшееся пространство по ширине, не фиксируя его размеры.
Сейчас мы умеем задавать размеры столбцов с помощью фиксированных значений, например, вот так:

grid-template-columns: 100px 100px 100px;

Но если мы хотим оставить среднему столбцу автоматический размер, то в объявлении должно появиться ключевое слово auto. То есть код станет таким:

grid-template-columns: 100px auto 100px;

Нефиксированная ширина столбцов и рядов
Значение auto можно использовать и в определении столбцов, и в определении строк. Можно даже делать это одновременно.

Грид-интервал: свойство gap
В реальных проектах часто бывает так, что при создании сетки между столбцами и рядами требуется оставить небольшой промежуток.
Разработчики спецификации гридов предусмотрели и эту возможность, придумав для нас свойство gap, позволяющее добавлять равномерный интервал сразу и между рядами, и между столбцами. Определяется это свойство в px, % и других единицах измерения:

.grid {
  gap: 10px;
}

Интересная особенность грид-интервалов: они не появляются между краями контейнера и крайними элементами. То есть это пустые пространства между элементами только изнутри грида.
Сначала свойство gap называлось grid-gap, но после было переименовано. Это произошло потому, что его стало можно использовать не только с гридами, а ещё с флексбоксом и колонками. Правда, в этих случаях поддержка браузерами пока оставляет желать лучшего.


Грид-интервал: свойства row-gap и column-gap
Не всегда нам необходимы одинаковые интервалы между рядами и столбцами, и в этом случае к нам на помощь приходят свойства column-gap и row-gap.
Как вы уже догадались, первое свойство задаёт интервал между столбцами, а второе — между рядами.


.grid {
  row-gap: 20px; /* грид-интервал между рядами */
  column-gap: 50px; /* грид-интервал между столбцами */
}

На самом деле с помощью свойства gap тоже можно задавать интервал отдельно для столбцов и для рядов. Если задать gap не одно, а два значения, первое будет определять интервал между рядами, а второе — между столбцами. Второе значение задаётся через пробел после первого:

.grid {
  /*
  грид-интервал между рядами 20px,
  грид-интервал между столбцами 50px
  */

  gap: 20px 50px;
}

Свойства column-gap и row-gap раньше назывались grid-column-gap и grid-row-gap соответственно. Как и gap, они были переименованы и теперь используются не только с гридами.
